@page
@model RazorPages.Pages.CheckoutPage

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>CheckOutPage</title>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
    <script src="https://unpkg.com/@@turf/turf@6.5.0/turf.min.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { margin: 0; padding: 0; }
        #map {position: relative; height: 400px; width: 340px; }
        #distance { position: absolute; top: 10px; left: 10px; background: white; padding: 5px; z-index: 1; }
        .map-container {
            height: 400px; /* Adjust map height as needed */
        }
    </style>
</head>
<body>


<div class="d-flex justify-content-center align-items-center py-5" style="height: 100vh; width: 100%">
    <div class="row">
        <div class="col-md-7">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="card-title">Order Billing</h1>
                        <a class="text-decoration-underline text-black " asp-page="./Cart">Back To CheckOut</a>
                    </div>
                    <hr>
                    <div class="my-3">Order ID: 12312312312312231</div>
                    <ul class="pl-0 list-group list-group-flush border p-4">
                        <li class="list-group-item mb-3 border-0 box-shadow shadow-sm">
                            <div class="row">
                                <div class="col-auto">
                                    <img src="path_to_your_image.jpg" alt="Ảnh sản phẩm" class="img-fluid" style="max-width: 100px;">
                                </div>
                                <div class="col">
                                    <div>
                                        <strong>Tên Sản phẩm:</strong> Haha<br>
                                        Mô tả sản phẩm
                                    </div>
                                </div>
                                <div class="col">
                                    <div>
                                        Giá: 100.000đ<br>
                                        Số lượng: 1 <!-- Replace with your dynamic quantity -->
                                    </div>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item mb-3 border-0 box-shadow shadow-sm">
                            <div class="row">
                                <div class="col-auto">
                                    <img src="path_to_your_image.jpg" alt="Ảnh sản phẩm" class="img-fluid" style="max-width: 100px;">
                                </div>
                                <div class="col">
                                    <div>
                                        <strong>Tên Sản phẩm:</strong> Haha<br>
                                        Mô tả sản phẩm
                                    </div>
                                </div>
                                <div class="col">
                                    <div>
                                        Giá: 100.000đ<br>
                                        Số lượng: 1 <!-- Replace with your dynamic quantity -->
                                    </div>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item border-0 box-shadow shadow-sm">
                            <div class="row">
                                <div class="col-auto">
                                    <img src="path_to_your_image.jpg" alt="Ảnh sản phẩm" class="img-fluid" style="max-width: 100px;">
                                </div>
                                <div class="col">
                                    <div>
                                        <strong>Tên Sản phẩm:</strong> Haha<br>
                                        Mô tả sản phẩm
                                    </div>
                                </div>
                                <div class="col">
                                    <div>
                                        Giá: 100.000đ<br>
                                        Số lượng: 1 <!-- Replace with your dynamic quantity -->
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>
                    <div class="mt-4 mb-2 d-flex justify-content-end">Ship Distance: 15km</div>
                    <div class="mb-2 d-flex justify-content-end">Ship Cost: $10</div>
                    <div class="mb-3 d-flex justify-content-end">Total Product Cost: $50</div>
                    <hr>
                    <div class="mb-3 d-flex justify-content-between align-items-center">
                        <h3>Total Bill:</h3>
                        <h4>500.000đ</h4>
                    </div>
                    <hr>
                    <div class="mb-3 d-flex justify-content-center">
                        <form style="width: 100%;">
                            <button class="btn btn-primary btn-block" type="submit">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="card">
                <div class="card-body">
                    <div class="map-container">
                        <div id="map"></div>
                        <div id="distance">Total distance: 0 km</div>
                        @* <div id="status">Latitude: 0.000000, Longitude: 0.000000</div> *@
                        @* <div id="address">Address: Loading...</div> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Set the Mapbox access token
    mapboxgl.accessToken = 'pk.eyJ1IjoiYmVudHJhbjF2biIsImEiOiJjbHkwOTBqMGgwazNkMm5xMnk0b2IybTI0In0.2MZ0F2VOrCYC4EjnKa2zxw';

    // Initialize the Mapbox map
    var map = new mapboxgl.Map({
        container: 'map',
        center: [106.8014777370877, 10.875373156839077], // Default center
        zoom: 12, // Initial zoom level
        style: 'mapbox://styles/mapbox/streets-v11' // Map style
    });

    const distanceContainer = document.getElementById('distance');
    const statusContainer = document.getElementById('status');

    // GeoJSON object to hold our measurement features
    const geojson = {
        'type': 'FeatureCollection',
        'features': []
    };

    // Used to draw a line between points
    const linestring = {
        'type': 'Feature',
        'geometry': {
            'type': 'LineString',
            'coordinates': []
        }
    };

    // Success function to handle the retrieved location
    function success(position) {
        const latitudeUser = position.coords.latitude;
        const longitudeUser = position.coords.longitude;

        // Update the map's center and zoom level to the user's location
        map.setCenter([longitudeUser, latitudeUser]);
        map.setZoom(12); // Closer zoom level to focus on the user's location

        map.on('load', () => {
            // Add a data source to the map
            map.addSource('geojson', {
                'type': 'geojson',
                'data': geojson
            });

            // Add layers to the map for points and lines
            map.addLayer({
                id: 'measure-points',
                type: 'circle',
                source: 'geojson',
                paint: {
                    'circle-radius': 5,
                    'circle-color': '#000'
                },
                filter: ['in', '$type', 'Point']
            });

            map.addLayer({
                id: 'measure-lines',
                type: 'line',
                source: 'geojson',
                layout: {
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                paint: {
                    'line-color': '#000',
                    'line-width': 2.5
                },
                filter: ['in', '$type', 'LineString']
            });

            // Default shop marker
            const marker1Coords = [106.8014777370877, 10.875373156839077];
            const shopMarker = new mapboxgl.Marker({ color: 'red' })
                .setLngLat(marker1Coords)
                .addTo(map);

            // User's location marker
            const userMarker = new mapboxgl.Marker({ color: 'blue' })
                .setLngLat([longitudeUser, latitudeUser])
                .addTo(map);

            // Create turf points for the markers
            const point1 = turf.point(marker1Coords);
            const point2 = turf.point([longitudeUser, latitudeUser]);

            // Add points to the geojson object
            geojson.features.push(point1);
            geojson.features.push(point2);

            // Create a LineString from the points
            linestring.geometry.coordinates.push(marker1Coords);
            linestring.geometry.coordinates.push([longitudeUser, latitudeUser]);

            // Add the LineString to the geojson object
            geojson.features.push(linestring);

            // Calculate the distance between the points using turf.js
            const distance = turf.length(linestring, { units: 'kilometers' });
            distanceContainer.textContent = `Total distance: ${distance.toFixed(2)} km`;

            // Update the geojson data source with the new data
            map.getSource('geojson').setData(geojson);
        });

        // Display the user's coordinates in the status container
        statusContainer.textContent = `Latitude: ${latitudeUser.toFixed(6)}, Longitude: ${longitudeUser.toFixed(6)}`;

        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitudeUser},${latitudeUser}.json?access_token=${mapboxgl.accessToken}`)
            .then(response => response.json())
            .then(data => {
                // Get the first result
                const address = data.features[0].place_name;
                // Display the address
                document.getElementById('address').textContent += `\nAddress: ${address}`;
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('address').textContent += '\nError retrieving address';
            });
    }

    // Error function to handle any issues retrieving the location
    function error() {
        statusContainer.textContent = 'Unable to retrieve your location';
    }

    // Check if the browser supports the Geolocation API
    if (navigator.geolocation) {
        // Request the user's location
        navigator.geolocation.getCurrentPosition(success, error);
    } else {
        // Browser does not support the Geolocation API
        statusContainer.textContent = 'Geolocation is not supported by your browser.';
    }
</script>
</body>
</html>